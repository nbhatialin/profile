README
    By Nikhil Bhatia-Lin, Charlie Caron, 11/27/17
    HW6: UM

1. We did not recieve any help from TAs or other students on this assignment

2. We believe all aspects of this program have been correctly implemented. 
Time taken to execute the midmark is a bit more than we aimed for, but still 
under the 10 second mark.

3. Significant departures:
    Using a sequence to hold segments instead of a table
    Made unpack a part of run_um, Added a full segments interface, added 
    aspects to the um interface. Created a sequence in the segments 
    implementation to hold ids.

4. Architecture:
    1 - Segments
        Uses a sequence to hold all of the segments. An individual segment 
        is represented as a struct containing both a UArray (which hold words)
        as well as an int that is either 0 or 1 and indicates whether the 
        segment is currently mapped (for checking whether access is good. The 
        Segments struct also contains a stack containing all of the unmapped 
        ids which are available for  reuse. The big secrets this module knows 
        are how the segments are stored (they are stored in a sequence). In addition, freeing segments only when the id is to be reused (even after removal) is a key this implementation relies on.
    2 - Um
        Uses an array of uint32_ts to hold the registers, a uint32_t to hold the program counter, and a Segments_T to hold the segments. Relies on
        segments, essentially wrapping segments functions and passing them 
        register values & registers for information storage. 
    3 - Um_load
        Is a standalone component. Used by execute_um to turn a file into a sequence which can then be passed to the um/segments to initialize a um. Hides the fact that it is reading into a sequence by returning a void pointer.
    4 - Execute_um 
        Uses um_load/load_um to load the inital program from a file and pass this to create a new um. Run function uses bitpack & a um function that returns the next word based to the program counter in order to iterate through and execute instructions. 

--- 5. Explains how long it takes your UM to execute 50 million instructions, and how you know
--- 6. Mentions each UM unit test (from UMTESTS) by name, explaining what each one tests and how
7. We spent approximately 4 hours analyzing the assignment
8. We spent approximately 4 hours preparing the design doc
9. We spent approximately 25 hours solving the problems after our analysis
